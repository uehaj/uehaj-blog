{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Uehaj-Blog","description":"Uheaj-Blog migrated from Qiita.","w3l_dom_key":"5e609f7a2d23fCF_Domain_verify"}},"allMarkdownRemark":{"edges":[{"node":{"id":"6a12106f-f81e-5e1f-8a76-0dc51163c648","excerpt":"第12回 オフラインリアルタイムどう書くの参考問題「道なりの亀」を、JVM上で動作するHaskellライクな言語Frege(フレーゲ)で解きました。","frontmatter":{"date":"February 20, 2020","path":"/0e0e7979b7e2b19e55f5.md/index.html","title":"第12回オフラインリアルタイムどう書くの参考問題をFregeで解く"}}},{"node":{"id":"84a34575-77c7-534c-a6ca-0b562b51553d","excerpt":"TAPL本(Types And Programming Language、型システム入門)の各章にある「ML実装」の例をRustにポーティングしてみるシリーズ、「7章のラムダ計算のML実装」です。4章のに比べるといきなり難易度が上がります。全体からしたら序の口でしょうが。 説明 unstableなゲート化された機能box_patternsを1箇所で使用しているので、Rust 1.0 betaではコンパイルできず、unstable機能がerrorにならないnightly…","frontmatter":{"date":"February 20, 2020","path":"/161f3c943faf35c6aefc.md/index.html","title":"TaPLのML実装をRustでやってみるシリーズ「7章 ラムダ計算のML実装」"}}},{"node":{"id":"487068ec-37fe-5733-be4e-f694d3a2997d","excerpt":"オフラインリアルタイムどう書くの過去問題「分岐と行き止まり」を、Rust(rustc 1.0.0-nightly (2fc8b1e7c 2015-03-07) (built 2015-03-07))で解きました。(他の言語での回答はこちら) Rustの感想 Rustは関数型プログラミングには向いてない、と思ったが、勘違いだった。やればできる。 やればできるのだが(後述)、iter(),into_iter()とcollect…","frontmatter":{"date":"February 20, 2020","path":"/25caa06ce666fc175d99.md/index.html","title":"第27回 オフラインリアルタイムどう書くの問題「分岐と行き止まり」をRustで解く"}}},{"node":{"id":"c742e17b-6f0f-593a-bec1-8a04f121ff79","excerpt":"TAPL本(Types And Programming Language、型システム入門)の各章にある「ML実装」の例をRustにポーティングしてみます。 まずは4章の算術式です。書籍でのtype termが保持するinfoは、ソースからパージングするわけではないので略します。いらなそうなletは省きました(OCamlでの必要性は不明)。 boxを除けば、ほぼOCamlと同等。GCの無い言語としては、良い線に行っていると思う。 実行メモリモデルがまさにC/C++なので、参照と値、clone…","frontmatter":{"date":"February 20, 2020","path":"/1ac71855d05132d54eb8.md/index.html","title":"TAPLのML実装をRustでやってみるシリーズ「4章 算術式のML実装」"}}},{"node":{"id":"7bb3acff-dbee-5df8-93fd-09608089446c","excerpt":"NTTテクノクロスの上原です。\n業務では、社内情報のReact製自前キュレーションサイトの構築を担当しています。過去に社外ブログにReactVRの記事を途中まで書いたりしましたが、ReactVR(今は改名されてReact 360)が思ったより流行らなくて放置してしまい、誠に申し訳ないです。 この記事はNTTテクノクロスAdvent Calendar24日目の記事であり、社内の勉強会で発表した内容をQiita記事として書きなおしたものです。タイトルは釣りです。\n(2018/12/2…","frontmatter":{"date":"February 20, 2020","path":"/1b7f0a86596353587466.md/index.html","title":"Reactベース静的サイトジェネレータGatsbyの真の力をお見せします"}}},{"node":{"id":"2de7db24-d8e2-5ee7-ad6b-5ab4c70a3556","excerpt":"https://github.com/microsoft/TypeScript/issues/27425#issuecomment-478004521 こんな問題がありますが、結論としては、回避策として「名前のついた型を指定しない」のが楽です。 リンク先から引用。","frontmatter":{"date":"February 20, 2020","path":"/036e17f54cf623cee1a6.md/index.html","title":"【React+TypeScript】Function Componentで省略可能propsの省略した場合の値を型安全に指定する"}}},{"node":{"id":"5808f925-e4ea-5962-955d-38f86932e4f1","excerpt":"G* Advent Calendar 2017 20日目の記事です。 GrailsのO/Rマッピングライブラリである「GORM」は、Grailsから切りはなして単体で使用することもできます。これをスタンドアローンGORMと呼びます。 非WebアプリやGrails以外の他のフレームワークから高機能なORMとして使うことも可能ですし、Grailsでのシステム開発の一部として、バッチやシェルスクリプトやssh…","frontmatter":{"date":"February 20, 2020","path":"/3a65b9c7dcbcc800fbf4.md/index.html","title":"スタンドアローンGORMをGroovyスクリプトからシュっと利用する"}}},{"node":{"id":"9d6ffe0d-0d1f-5588-98b9-17926a567e2c","excerpt":"🎄メリークリスマスイブ!🎄 この記事は、React-Springというアニメーションのライブラリを紹介する NTTテクノクロス Advent Calendar 2019 の24日目の記事です。23日目は@yuitomoさんの記事、明日25日最終日は@korodroidさんの記事です。 2019年、令和初の年末も押しせまってまいりましたが、みなさん如何おすごしでしょうか? NTTテクノクロスの上原と申します。React/Gatsby…","frontmatter":{"date":"February 20, 2020","path":"/260f188851045cc091ac.md/index.html","title":"React-SpringのHooks APIでブラウザアニメーションを基本から極めよう!"}}},{"node":{"id":"44149bcf-4c92-59fd-a026-8ea0d79d93f0","excerpt":"package.jsonのdependencies/devDependenciesにおいて、左端が0ではない、z.y.zという3桁のバージョンを指定する場合、以下のとおり。 記法 種別 意味 問題点など ^x.y.z キャレット表記 セマンティックバージョニングに従う。つまり、メジャーバージョンxを指定し、マイナーバージョンyの上昇、パッチバージョンzの上昇は互換性があるはずだと信じて、「x.{y以上}.{yが同じならz以上、y…","frontmatter":{"date":"February 20, 2020","path":"/443580da712d2ccee159.md/index.html","title":"npmのモジュールバージョン指定におけるチルダ(~)とキャレット(^)の違いについての直感的な理解"}}},{"node":{"id":"8d0b106b-4c0d-5221-9e96-175a15074a29","excerpt":"後入りですみませんが、WebAssemblyアドベントカレンダー未投稿のところ埋めさせて頂きます。 本記事では、WebAssemblyをターゲットとするコンパイラ処理系を実装します。 方針 WebAssemblyへのコンパイル言語処理系を最も簡単に 実装するための方針は以下のとおり。 主観です。 言語は「コンパイラがなるべく小さくなる言語として考案」されたBrainf*ckを採用 文法はPEG(Parsing Expression Grammar)で記述し、生成系PEG.js…","frontmatter":{"date":"February 20, 2020","path":"/5276bd3425d1000e48ba.md/index.html","title":"WebAssemblyへのコンパイラ言語を簡単に実装"}}},{"node":{"id":"5954c4ae-c487-51c5-899a-3da63484ad3f","excerpt":"第14回 オフラインリアルタイムどう書くの参考問題「眠れるモンスターを狩る」を、Haskellで解きました。Stateモナドを使ってみたけど苦労のわりには…。","frontmatter":{"date":"February 20, 2020","path":"/48cb682cc3441f1066a3.md/index.html","title":"第14回オフラインリアルタイムどう書くの参考問題をHaskellで解く"}}},{"node":{"id":"b0b6b04e-8d0c-5a56-98f7-46baf96aeed1","excerpt":"第19回 オフラインリアルタイムどう書くの問題「不良セクタの隣」を、Haskellで解きました。","frontmatter":{"date":"February 20, 2020","path":"/53460a9772f2bfbaa3c1.md/index.html","title":"第19回 オフラインリアルタイムどう書くの問題「不良セクタの隣」を、Haskellで解く"}}},{"node":{"id":"7015ae3f-81a2-5f39-af36-54d44fee9284","excerpt":"Node.jsでC言語のgetchar()マクロ(getc()関数)に相当するような、標準入力から1文字文字を読みとる処理を書くやりかた。NPMを使わずに手軽に直接できる方法を見つけられなかったため作成。仕様は以下のとおり。 Promiseベース。以下で「〜を返す」は、「〜をPromiseのresolve値とするPromiseを返す」と読みかえてほしい。 呼ぶごとに標準入力から1文字ずつ取得したUnicodeのコードポイント値を返す。readlineから得たstringからcharCodeAt…","frontmatter":{"date":"February 20, 2020","path":"/5d9fec1ba6cc4c76e378.md/index.html","title":"Node.jsでgetchar"}}},{"node":{"id":"22c62d54-24c6-5d1b-9241-e89cc3b17ca4","excerpt":"Grails 2ではGrails自身が実装していた設定ファイルの外部化は、Grails 3ではSpring Bootにまかされることになりました。 本記事では、Grails 2までの設定ファイル外部化となるべく似たような動作をするようにGrails 3設定してみます。 やることは、Applicationクラス(grails-app/init/hoge/Application.groovy)に以下のようにアノテーションを付与することだけです。 上記によって以下のように動作します。 (1) war…","frontmatter":{"date":"February 20, 2020","path":"/5cd1e9a1ea3d451e784e.md/index.html","title":"Grails3で、Grails2と同様に設定ファイルを外部化する"}}},{"node":{"id":"e8e63f71-1192-504c-b2ac-4f101bd705c3","excerpt":"Node.jsでのBrainf*ckインタプリタ実装。PEG.js使用。\nPEG.jsの勉強に作ってみました。PEG.js便利です。JSに馴染むぞぉ〜。 BF処理系として、工夫といえば工夫なのは、ループブロック構文との対応を、実行時に命令列からスキャンするのではなく、パース/AST構築の段階でシンタックスの問題として解決するところ。まあ、普通に考えればそうなるべきな話ではあるのですが。 苦労したのは、…","frontmatter":{"date":"February 20, 2020","path":"/68fa097e03d0572aefe4.md/index.html","title":"Node.jsでPEG.jsでBrainf*ck"}}},{"node":{"id":"ad3658af-6727-5f1f-8998-1b7b5482b39e","excerpt":"第13回 オフラインリアルタイムどう書くの問題「積み木の水槽」を、JVM上で動作するHaskellライクな言語Frege(フレーゲ)で解きました。","frontmatter":{"date":"February 20, 2020","path":"/60abb9be0dfac0755dcf.md/index.html","title":"第13回オフラインリアルタイムどう書くの問題をFregeで解く"}}},{"node":{"id":"25b0db71-fcf0-5f36-9bca-d333bd1290fd","excerpt":"DartのIsolateを使って相互に通信をする例。 追記あり Isolate→spawn元(main)の方向の通信は、ReceivePort.sendPortをspawn時に渡してやれば良いが、逆方向の通信(main→Isolate)は、spawnしたIsolate先でReceivePortを作成し、そのsendPortをmainに戻してもらい、そのsendport経由で送信することになる。 sendPortをどうやって戻すかだが、以下ではIsolateに渡すReceivePort…","frontmatter":{"date":"February 20, 2020","path":"/69d1eba89ebe51af6d02.md/index.html","title":"Dartのアイソレート間で相互通信をする例"}}},{"node":{"id":"81c2fc13-a79d-56c5-a2eb-86c3943e9616","excerpt":"はじめに TypeScriptの関数型について、いまいちすっきりしてなかったので整理してみました。\nまず、準備としてとして とします。 関数定義の基本パターン 次に、関数定義の基本パターンとして とします。このときfunc1の型は「」です。\n以降、このバリエーションを見ていきます。意味的にはすべて同じです。 アロー式での関数定義 アロー式で定義します。このときfunc2の型は「」です。\nfunc1のfunction…","frontmatter":{"date":"February 20, 2020","path":"/79c277301f89d109c11d.md/index.html","title":"TypeScriptの関数の型指定まとめ"}}},{"node":{"id":"e4a9e4a6-d38d-5ff6-8f97-7ea3643b5688","excerpt":"2019/09/13追記 Dart 2.5で「 As of Dart 2.5, we support many more ways to define constant expressions, including the ability to use casts and the new control flow and collection spread features shipped in Dart 2.3:」とのことで以下が可能となりました。本文には反映していません。 はじめに Dart…","frontmatter":{"date":"February 20, 2020","path":"/7c07f019e05a743d1022.md/index.html","title":"Dartの変数定義時の修飾static/final/const、そしてconst constructorについて"}}},{"node":{"id":"45f88c3f-05a1-5855-873c-8d1f206b4ceb","excerpt":"第28回 オフラインリアルタイムどう書くの問題「十字の壁がそそり立つ世界の中を君は螺旋状に歩く」を、Rust(2015-02-22 nightly)で解きました。 u32だったのをu64にして、末尾再帰をloopに置き換えただけで、追加問題も難なく実行できました。 感想 このレベル(並列なし、Owned Pointerなし、traitなし)だと、Rustは単に「すばらしいC言語」。何もデメリットがない。C言語経験者だったら、単に楽しく便利なだけ。 Box…","frontmatter":{"date":"February 20, 2020","path":"/7de2d1b0fb2aabf2f27d.md/index.html","title":"第28回 オフラインリアルタイムどう書くの問題「十字の壁がそそり立つ世界の中を君は螺旋状に歩く」をRustで解く"}}},{"node":{"id":"b80a1cf1-3084-503f-9631-e8b675f70183","excerpt":"追記(2017/05/2) redux-sagaでの非同期バージョンの紹介とリンクを追記。 追記(2017/2/23修正) 元記事の追記3にて言及を頂いたように、以下の「見易い版」コードは元コードが実現していた機能が抜けおちているという誤りがあります。遅くなりましたが、お詫びの上修正させていただきます。\n修正内容は以下の「refresh…","frontmatter":{"date":"February 20, 2020","path":"/80056c1ff10c63dc7810.md/index.html","title":"「リアクティブプログラミングが読み難い」というのは本当なのか?"}}},{"node":{"id":"0623c3b7-76e5-57d6-afa9-1c0cd74f281e","excerpt":"Material UIでのスタイル指定方法を説明します。Material UIのスタイルシステムの実体はJSSです。themeについては言及しません。もっと基礎的なところだけです。 classNameで即値指定 HTMLで言うclass=の指定。Material UI的には何もしない。BEMやscssでもなんでもいいのですが、外部スタイルシートを定義してあてがっていくパターン。 styleで指定 styleプロパティの指定。Material UI的には何もしない。オブジェクトがdomのstyle…","frontmatter":{"date":"February 20, 2020","path":"/969ef20ccef850d2e9b1.md/index.html","title":"Material UIのスタイル指定(JSS)"}}},{"node":{"id":"26d7b9b2-a55d-56ac-937b-7fa57e03fadc","excerpt":"Escapeキーは遠く、さらにtouch barでは押しにくいので、Control+[をEscapeキーにわりあてます。 Karabinar Elementsをインストールする 以下を作成する。 `json:~/.config/karabiner/assets/complexmodifications/myconfig.json\n{\n  \"title\": \"Ctrl+[をEscapeにする。\",\n  \"rules\": [\n    {\n      \"description\": \"Ctrl…","frontmatter":{"date":"February 20, 2020","path":"/a6637482c5f6246cb30f.md/index.html","title":"macosで Control+[ 押下をEscapeに割り当てる"}}},{"node":{"id":"ffad27c7-b0ee-5e8c-860b-8b91a68a7d29","excerpt":"はじめに React HooksのuseCallbackは、イベントハンドラ(コールバック)を使うときは無条件に使うものだと思っていませんか。実際にはコールバックが「ある条件をみたす」ときに使うべきもののようです。このある条件を整理して明確にするために記事を書きました。 useCallbackとは何か useCallbackは、useMemoのような、重い計算を回避しキャッシュを使うというような効率向上のための仕組みではありません。useCallback…","frontmatter":{"date":"February 20, 2020","path":"/99f7cd014e2c0fa1fc4e.md/index.html","title":"React HooksのuseCallbackを正しく理解する"}}},{"node":{"id":"36fac33e-0a1a-50f3-89ea-f4715148161c","excerpt":"第12回 オフラインリアルタイムどう書くの問題「サイコロを転がす」を、Haskellで解きました。\nStateモナド厨。","frontmatter":{"date":"February 20, 2020","path":"/5f46b012f13e1d3cee55.md/index.html","title":"第12回オフラインリアルタイムどう書くの問題「サイコロを転がす」をHaskellで解く"}}},{"node":{"id":"90e8ae69-aa62-57c5-b8e8-7da456d0893c","excerpt":"この記事は、@inuscriptさんによる「redux-observableで検索機能の実装を写経してRxJSのパワーを感じる」をRedux-Sagaで書きなおしたものです。 本記事の目的 実用コードにおける非同期処理では以下のような問題が頻出する。これらについて元記事におけるRedux-obserbable(あるいはAngularが提供する)RxJSを用いた解決方法に対して、Redux-sagaによる解決方法を比較する。 (元記事よりの引用) redux-sagaの説明 redux-saga…","frontmatter":{"date":"February 20, 2020","path":"/bee9b9dd8279b1a769bb.md/index.html","title":"redux-sagaで検索機能の実装を写経してCSPのパワーを感じる"}}},{"node":{"id":"347b3e11-02e0-5790-b432-85b7ff15e86c","excerpt":"elmでやってみるシリーズ1: ●を動かす。 こちらで実行できます。 感想 foldpは好き。 inputに対応するSignal…","frontmatter":{"date":"February 20, 2020","path":"/ce95865dc999be1d68eb.md/index.html","title":"Elmでやってみようシリーズ1"}}},{"node":{"id":"bc081263-f864-5821-8f64-eb4d1c2d071c","excerpt":"TL;DR dockerで、コンテナ内で実行するプロセスを指定してのコンテナ起動方法は以下のとおり。  docker runで、起動するプロセスを毎回指定するのが面倒で、決まった特定のプロセスを指定したいなら、以下のどれかを選択する。 (ENTRYPOINTを指定しない場合) DockerfileのCMD項目でプロセスおよびそれへの引数を指定する。この場合、 のようにプロセス指定を省略して起動したときに、CMD…","frontmatter":{"date":"February 20, 2020","path":"/e6dd013e28593c26372d.md/index.html","title":"DockerfileのCMDとENTRYPOINTを改めて解説する"}}},{"node":{"id":"ae138031-1b7b-5862-bc4f-2289742306be","excerpt":"はじめに React #1 Advent Calendar 2017の11日目です。 Reduxのミドルウェア「Redux-saga」で「やや複雑なリアルタイムゲーム」としてテトリス風のゲームの基本部分を開発し、それを通じて学んだこと・感じたことを紹介します。 画面例 まずは実装したテトリス風ゲームの画面例。矢印キーの左右下でピースを動かし、z,xで回転です。 sagaris.gif sagaris2.mov.gif…","frontmatter":{"date":"February 20, 2020","path":"/eaa039a7ce44d5969f06.md/index.html","title":"Redux-Sagaでテトリス風ゲームを実装して学んだこと"}}},{"node":{"id":"9a807e0e-7ee3-5a89-86fd-e147fa239f6b","excerpt":"TouchBarつきのMacBookでは、エスケープキーが使いにくいので、Escapeキーの代りに を割り当てます。  からkeybindigs.jsonを開いて以下を追加。","frontmatter":{"date":"February 20, 2020","path":"/f2c71325c9f7dc10357c.md/index.html","title":"Visual Studio Codeでエスケープキーの代りに^[を使用する設定"}}},{"node":{"id":"e6fa0d9c-4d47-5c53-bcd1-5a382787c017","excerpt":"React-Reduxの公式から「Redux Starter Kit」というものが公開されています。 これがなにかといえば、私の理解するかぎり以下です。 React-Reduxまわりのベストプラクティス、定番拡張、定番併用ライブラリ、定番ミドルウェアを、簡単に組込むための簡単で軽めのライブラリ、メタパッケージ。 CLIコマンドではなくライブラリです。\nこれは良いものだと思いましたので全力でお勧めしていきます。 特徴 TypeScriptフル対応。当然ですね。 React Redux 7.…","frontmatter":{"date":"February 20, 2020","path":"/f91d68ea4ef8450fc45c.md/index.html","title":"Redux Starter KitでHooksとReduxを使いこなそう"}}},{"node":{"id":"726fd31d-779c-5f8c-903c-ac657f5e5512","excerpt":"第13回 オフラインリアルタイムどう書くの参考問題「増やす減らす二倍する」を、JVM上で動作するHaskellライクな言語Frege(フレーゲ)で解きました。","frontmatter":{"date":"February 20, 2020","path":"/944cd9903c3827f1d1bc.md/index.html","title":"第13回オフラインリアルタイムどう書くの参考問題をFregeで解く"}}},{"node":{"id":"dad6a45a-bf2a-5ae7-9b29-ccc3b8fdfe6d","excerpt":"関数型プログラミングを業務開発で活用するために HaskellやScala、Erlang/Elixir、Clojureなどの関数型プログラミング言語に興味がある人は多いと思いますが、自分らが日常行なっている業務での開発では到底それらの関数型言語を採用できないのが現実、という場合があるかもしれません。 なので、当面はJavaやGroovy、JS,Ruby,Pythonなどの非関数型プログラミング言語の上で関数型プログラミングスタイルや考え方をなるべく使っていくことでFP…","frontmatter":{"date":"February 20, 2020","path":"/ff13229413b785cd9cf8.md/index.html","title":"関数型プログラミングを業務開発に適用するための架空の社内勉強会資料"}}},{"node":{"id":"981bc369-d325-5c42-967c-3204c954dead","excerpt":"JS(ES2015)でデフォルトカリー化を味わうためには、関数定義は以下のようにするものだ、と自分に言いきかせます。  たとえば、以下のように関数を定義して… 呼び出しは以下のようにします。 これでOK。\nえ?呼び出しが煩雑だって?\nならば、以下のように$プロパティをFunctionに定義すると… こんな風にできます。 はhaskellの$のイメージ。 追記 NPMパッケージ化しました。 https://www.npmjs.com/package/uncurry-apply","frontmatter":{"date":"February 20, 2020","path":"/d3dd93bc9266d35bd1c6.md/index.html","title":"JSでデフォルトカリー化"}}}]}},"pageContext":{}}}